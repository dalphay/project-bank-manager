{"remainingRequest":"/home/diallo/project-bank-manager/node_modules/babel-loader/lib/index.js!/home/diallo/project-bank-manager/node_modules/vue-loader/lib/selector.js?type=script&index=0!/home/diallo/project-bank-manager/src/components/List.vue","dependencies":[{"path":"/home/diallo/project-bank-manager/src/components/List.vue","mtime":1519916369571},{"path":"/home/diallo/project-bank-manager/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/home/diallo/project-bank-manager/node_modules/babel-loader/lib/index.js","mtime":1519578809000},{"path":"/home/diallo/project-bank-manager/node_modules/vue-loader/lib/selector.js","mtime":1514695968000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'list',\n\n  /** \n   * La propriété props permet de spécifier des arguments qu'on pourra\n   * passer au component lors de son utilisation dans le template parent.\n   * Ici, on dit que notre component aura un attribut tab, qui attend un\n   * Array et qui est requis pour que le component fonctionne.\n  */\n  props: {\n    tab: {\n      type: Array,\n      required: true\n    }\n  },\n  methods: {\n    action1: function action1(item) {\n      /**\n       * On utilise la méthode $emit pour dire à notre component\n       * d'émettre un event vers son parent. Le nom de l'event est\n       * le premier argument, les arguments suivant sont les paramètres\n       * passés par l'event\n       */\n      this.$emit('action1', item);\n    },\n    action2: function action2(index) {\n      this.$emit('action2', index);\n    }\n  }\n};",{"version":3,"sources":["List.vue"],"names":[],"mappings":";;;;;;;;;AAUA;QAEA;;AACA,AACA,AACA,AACA,AACA,AACA;;;;;;;;YAGA;gBACA,AACA,AACA;AAJA;AADA;;oCAOA;AACA,AACA,AACA,AACA,AACA,AACA;;;;;;4BACA;AACA;qCACA;4BACA;AACA,AAEA;AAdA;AAdA","sourceRoot":"src/components","sourcesContent":["<template>\n  <ul>\n    <li v-for=\"(item,index) of tab\" :key=\"index\"\n    @click=\"action1(item)\" @dblclick=\"action2(index)\">\n        {{index}} {{item}}\n    </li>\n  </ul>\n</template>\n\n<script>\nexport default {\n    name:'list',\n    /** \n     * La propriété props permet de spécifier des arguments qu'on pourra\n     * passer au component lors de son utilisation dans le template parent.\n     * Ici, on dit que notre component aura un attribut tab, qui attend un\n     * Array et qui est requis pour que le component fonctionne.\n    */\n    props: {\n        tab: {\n            type: Array,\n            required: true\n        }\n    },\n    methods: {\n        action1(item) {\n            /**\n             * On utilise la méthode $emit pour dire à notre component\n             * d'émettre un event vers son parent. Le nom de l'event est\n             * le premier argument, les arguments suivant sont les paramètres\n             * passés par l'event\n             */\n            this.$emit('action1', item);\n        },\n        action2(index) {\n            this.$emit('action2', index);\n        }\n    }\n    \n}\n</script>\n\n<style>\n\n</style>\n"]}]}